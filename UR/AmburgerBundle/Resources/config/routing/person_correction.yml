
#@TODO: Think about moving start to correction?
correction:
    path:     /correction/
    defaults: { _controller: AmburgerBundle:CorrectionStart:index }
    methods: [GET]
    
checkOID:
    path:     /correction/{ID}/check
    defaults: { _controller: AmburgerBundle:CorrectionStart:check }
    methods: [GET]

nextOID:
    path:     /correction/next
    defaults: { _controller: AmburgerBundle:CorrectionStart:next }
    methods: [GET]

correctionWork:
    path:     /correction/{ID}
    defaults: { _controller: AmburgerBundle:CorrectionStart:startWork }
    methods: [POST]
    
correctionStatistics:
    path:     /correction/statistics
    defaults: { _controller: AmburgerBundle:CorrectionStart:statistics }
    methods: [GET]

# duplicate
duplicate:
    path:    /correction/{ID}/duplicate/
    defaults: { _controller: AmburgerBundle:CorrectionDuplicate:index } 
    methods: [GET]
    
duplicate_load_person:
    path:    /correction/{ID}/duplicate/load/person
    defaults: { _controller: AmburgerBundle:CorrectionDuplicate:loadPersonWithRelatives } 
    methods: [GET]
    
duplicate_load_duplicates:
    path:    /correction/{ID}/duplicate/load/duplicates
    defaults: { _controller: AmburgerBundle:CorrectionDuplicate:loadDuplicates } 
    methods: [GET]
    
duplicate_merge:
    path:    /correction/{ID}/duplicate/merge/{duplicateId}
    defaults: { _controller: AmburgerBundle:CorrectionDuplicate:merge } 
    methods: [POST]
    
# person correction

person:
    path:    /correction/{ID}/person/
    defaults: { _controller: AmburgerBundle:CorrectionPerson:index } 
    methods: [GET]
    
person_load:
    path:    /correction/{ID}/person/load
    defaults: { _controller: AmburgerBundle:CorrectionPerson:load } 
    methods: [GET]
    
person_load_wedding:
    path:    /correction/{ID}/person/load/wedding
    defaults: { _controller: AmburgerBundle:CorrectionPerson:loadWedding } 
    methods: [GET]    

    
person_save:
    path:    /correction/{ID}/person/save
    defaults: { _controller: AmburgerBundle:CorrectionPerson:save } 
    methods: [POST]

    
person_wedding_save:
    path:    /correction/{ID}/person/save/wedding
    defaults: { _controller: AmburgerBundle:CorrectionPerson:saveWedding } 
    methods: [POST]

person_gnd:
    path:    /correction/{ID}/person/gnd/{searchTerm}
    defaults: { _controller: AmburgerBundle:CorrectionPerson:searchGND } 
    methods: [GET]


#person_relatives
person_relatives:
    path:    /correction/{ID}/relatives/
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:index } 
    methods: [GET]
    
person_relatives_load:
    path:    /correction/{ID}/relatives/load
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:loadPerson } 
    methods: [GET]
    
person_relatives_possible:
    path:    /correction/{ID}/relatives/possible
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:findPossibleRelatives } 
    methods: [GET]
    
person_relatives_direct:
    path:    /correction/{ID}/relatives/direct
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:loadDirectRelatives } 
    methods: [GET]
    
person_relatives_create:
    path:    /correction/{ID}/relatives/create
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:create } 
    methods: [PUT]
        
person_relatives_update:
    path:    /correction/{ID}/relatives/update
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:update } 
    methods: [POST]
    
person_relatives_remove:
    path:    /correction/{ID}/relatives/remove
    defaults: { _controller: AmburgerBundle:CorrectionRelatives:remove } 
    methods: [POST]
    
correction_end:
    path:     /correction/{ID}/end/
    defaults: { _controller: AmburgerBundle:CorrectionEnd:index }
    methods: [GET]
    
correction_complete:
    path:     /correction/{ID}/end/complete
    defaults: { _controller: AmburgerBundle:CorrectionEnd:complete }
    methods: [GET]